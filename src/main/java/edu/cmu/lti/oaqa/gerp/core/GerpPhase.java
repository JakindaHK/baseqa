package edu.cmu.lti.oaqa.gerp.core;

import java.util.List;

import org.apache.uima.UimaContext;
import org.apache.uima.analysis_engine.AnalysisEngineDescription;
import org.apache.uima.analysis_engine.AnalysisEngineProcessException;
import org.apache.uima.cas.AbstractCas;
import org.apache.uima.cas.CAS;
import org.apache.uima.jcas.JCas;
import org.apache.uima.resource.ResourceInitializationException;
import org.uimafit.component.JCasMultiplier_ImplBase;
import org.uimafit.descriptor.OperationalProperties;

import com.google.common.collect.Lists;

/**
 * Extended from {@link edu.cmu.lti.oaqa.ecd.phase.BasePhase}, which instead of using
 * <code>options</code> for integrating components, generators, evidencers, rankers and pruners
 * inherited from {@link AbstractGenerator}, {@link AbstractEvidencer}, {@link AbstractRanker}, or
 * {@link AbstractPruner} should be listed in separated fields in the descriptor. Other options,
 * e.g. <code>name</code>, <code>option-timeout</code>, <code>lazy-load-options</code> are
 * preserved.
 * <p>
 * Each combination of TOPs generated by previous {@link GerpPhase}s (
 * {@link JCasMultiplier_ImplBase} implementations), claimed by
 * {@link AbstractGenerator#getRequiredInputTypes()} as input arguments, will be stored in different
 * {@link CAS}es and processed by the {@link #process(JCas)} separately, and further passed along
 * the pipeline within the analysis engine for evidencing, ranking and pruning. The number of
 * {@link CAS}es output from the {@link #next()} method of each GerpPhase instance is equal to the
 * number of <code>generator</code>s defined in the descriptor.
 * 
 * @author Zi Yang <ziy@cs.cmu.edu>
 * 
 */
@OperationalProperties(outputsNewCases = true)
public class GerpPhase extends JCasMultiplier_ImplBase {

  private AnalysisEngineDescription[] generatorDescriptions, evidencerDescriptions,
          rankerDescriptions, prunerDescriptions;

  private JCas jcas;

  @Override
  public void initialize(UimaContext context) throws ResourceInitializationException {
    // TODO Auto-generated method stub
    super.initialize(context);
  }

  @Override
  public void process(JCas aJCas) throws AnalysisEngineProcessException {
    // TODO Auto-generated method stub
    // generator multiplier
    // generator merger
    // evidencer multiplier
    // evidencer merger
    // ranker multiplier
    // ranker merger
    // pruner multiplier
    // pruner merger
  }

  @Override
  public void collectionProcessComplete() throws AnalysisEngineProcessException {
    // TODO Auto-generated method stub
    super.collectionProcessComplete();
  }

  @Override
  public boolean hasNext() throws AnalysisEngineProcessException {
    return false;
  }

  @Override
  public AbstractCas next() throws AnalysisEngineProcessException {
    return jcas;
  }

}