

/* First created by JCasGen Mon Jun 24 14:02:20 EDT 2013 */
package org.oaqa.model.gerp;

import org.apache.uima.jcas.JCas; 
import org.apache.uima.jcas.JCasRegistry;
import org.apache.uima.jcas.cas.TOP_Type;

import org.apache.uima.jcas.cas.FSArray;
import org.oaqa.model.core.OAQATop;
import org.apache.uima.jcas.cas.StringArray;


/** The base class for Gerp feature structures that are not Annotations, with G/E/E/P features defined.
 * Updated by JCasGen Mon Jun 24 14:02:20 EDT 2013
 * XML source: C:/Users/yangz13/QA/baseqa/src/main/resources/edu/cmu/lti/oaqa/OAQATypes.xml
 * @generated */
public class GerpTop extends OAQATop {
  /** @generated
   * @ordered 
   */
  @SuppressWarnings ("hiding")
  public final static int typeIndexID = JCasRegistry.register(GerpTop.class);
  /** @generated
   * @ordered 
   */
  @SuppressWarnings ("hiding")
  public final static int type = typeIndexID;
  /** @generated  */
  @Override
  public              int getTypeIndexID() {return typeIndexID;}
 
  /** Never called.  Disable default constructor
   * @generated */
  protected GerpTop() {/* intentionally empty block */}
    
  /** Internal - constructor used by generator 
   * @generated */
  public GerpTop(int addr, TOP_Type type) {
    super(addr, type);
    readObject();
  }
  
  /** @generated */
  public GerpTop(JCas jcas) {
    super(jcas);
    readObject();   
  } 

  /** <!-- begin-user-doc -->
    * Write your own initialization here
    * <!-- end-user-doc -->
  @generated modifiable */
  private void readObject() {/*default - does nothing empty block */}
     
 
    
  //*--------------*
  //* Feature: generators

  /** getter for generators - gets An array of genenator names that nominee this feature structure to be the candidate of a certain targeted entity.
   * @generated */
  public StringArray getGenerators() {
    if (GerpTop_Type.featOkTst && ((GerpTop_Type)jcasType).casFeat_generators == null)
      jcasType.jcas.throwFeatMissing("generators", "org.oaqa.model.gerp.GerpTop");
    return (StringArray)(jcasType.ll_cas.ll_getFSForRef(jcasType.ll_cas.ll_getRefValue(addr, ((GerpTop_Type)jcasType).casFeatCode_generators)));}
    
  /** setter for generators - sets An array of genenator names that nominee this feature structure to be the candidate of a certain targeted entity. 
   * @generated */
  public void setGenerators(StringArray v) {
    if (GerpTop_Type.featOkTst && ((GerpTop_Type)jcasType).casFeat_generators == null)
      jcasType.jcas.throwFeatMissing("generators", "org.oaqa.model.gerp.GerpTop");
    jcasType.ll_cas.ll_setRefValue(addr, ((GerpTop_Type)jcasType).casFeatCode_generators, jcasType.ll_cas.ll_getFSRef(v));}    
    
  /** indexed getter for generators - gets an indexed value - An array of genenator names that nominee this feature structure to be the candidate of a certain targeted entity.
   * @generated */
  public String getGenerators(int i) {
    if (GerpTop_Type.featOkTst && ((GerpTop_Type)jcasType).casFeat_generators == null)
      jcasType.jcas.throwFeatMissing("generators", "org.oaqa.model.gerp.GerpTop");
    jcasType.jcas.checkArrayBounds(jcasType.ll_cas.ll_getRefValue(addr, ((GerpTop_Type)jcasType).casFeatCode_generators), i);
    return jcasType.ll_cas.ll_getStringArrayValue(jcasType.ll_cas.ll_getRefValue(addr, ((GerpTop_Type)jcasType).casFeatCode_generators), i);}

  /** indexed setter for generators - sets an indexed value - An array of genenator names that nominee this feature structure to be the candidate of a certain targeted entity.
   * @generated */
  public void setGenerators(int i, String v) { 
    if (GerpTop_Type.featOkTst && ((GerpTop_Type)jcasType).casFeat_generators == null)
      jcasType.jcas.throwFeatMissing("generators", "org.oaqa.model.gerp.GerpTop");
    jcasType.jcas.checkArrayBounds(jcasType.ll_cas.ll_getRefValue(addr, ((GerpTop_Type)jcasType).casFeatCode_generators), i);
    jcasType.ll_cas.ll_setStringArrayValue(jcasType.ll_cas.ll_getRefValue(addr, ((GerpTop_Type)jcasType).casFeatCode_generators), i, v);}
   
    
  //*--------------*
  //* Feature: evidences

  /** getter for evidences - gets An array of evidences generated by evidencers for a particular GERP feature structure. Each element corresponds to the evidence from an evidencer.
   * @generated */
  public FSArray getEvidences() {
    if (GerpTop_Type.featOkTst && ((GerpTop_Type)jcasType).casFeat_evidences == null)
      jcasType.jcas.throwFeatMissing("evidences", "org.oaqa.model.gerp.GerpTop");
    return (FSArray)(jcasType.ll_cas.ll_getFSForRef(jcasType.ll_cas.ll_getRefValue(addr, ((GerpTop_Type)jcasType).casFeatCode_evidences)));}
    
  /** setter for evidences - sets An array of evidences generated by evidencers for a particular GERP feature structure. Each element corresponds to the evidence from an evidencer. 
   * @generated */
  public void setEvidences(FSArray v) {
    if (GerpTop_Type.featOkTst && ((GerpTop_Type)jcasType).casFeat_evidences == null)
      jcasType.jcas.throwFeatMissing("evidences", "org.oaqa.model.gerp.GerpTop");
    jcasType.ll_cas.ll_setRefValue(addr, ((GerpTop_Type)jcasType).casFeatCode_evidences, jcasType.ll_cas.ll_getFSRef(v));}    
    
  /** indexed getter for evidences - gets an indexed value - An array of evidences generated by evidencers for a particular GERP feature structure. Each element corresponds to the evidence from an evidencer.
   * @generated */
  public Evidence getEvidences(int i) {
    if (GerpTop_Type.featOkTst && ((GerpTop_Type)jcasType).casFeat_evidences == null)
      jcasType.jcas.throwFeatMissing("evidences", "org.oaqa.model.gerp.GerpTop");
    jcasType.jcas.checkArrayBounds(jcasType.ll_cas.ll_getRefValue(addr, ((GerpTop_Type)jcasType).casFeatCode_evidences), i);
    return (Evidence)(jcasType.ll_cas.ll_getFSForRef(jcasType.ll_cas.ll_getRefArrayValue(jcasType.ll_cas.ll_getRefValue(addr, ((GerpTop_Type)jcasType).casFeatCode_evidences), i)));}

  /** indexed setter for evidences - sets an indexed value - An array of evidences generated by evidencers for a particular GERP feature structure. Each element corresponds to the evidence from an evidencer.
   * @generated */
  public void setEvidences(int i, Evidence v) { 
    if (GerpTop_Type.featOkTst && ((GerpTop_Type)jcasType).casFeat_evidences == null)
      jcasType.jcas.throwFeatMissing("evidences", "org.oaqa.model.gerp.GerpTop");
    jcasType.jcas.checkArrayBounds(jcasType.ll_cas.ll_getRefValue(addr, ((GerpTop_Type)jcasType).casFeatCode_evidences), i);
    jcasType.ll_cas.ll_setRefArrayValue(jcasType.ll_cas.ll_getRefValue(addr, ((GerpTop_Type)jcasType).casFeatCode_evidences), i, jcasType.ll_cas.ll_getFSRef(v));}
   
    
  //*--------------*
  //* Feature: ranks

  /** getter for ranks - gets An array of ranks generated by rankers for a particular GERP feature structure. Each element corresponds to the rank from a ranker.
   * @generated */
  public FSArray getRanks() {
    if (GerpTop_Type.featOkTst && ((GerpTop_Type)jcasType).casFeat_ranks == null)
      jcasType.jcas.throwFeatMissing("ranks", "org.oaqa.model.gerp.GerpTop");
    return (FSArray)(jcasType.ll_cas.ll_getFSForRef(jcasType.ll_cas.ll_getRefValue(addr, ((GerpTop_Type)jcasType).casFeatCode_ranks)));}
    
  /** setter for ranks - sets An array of ranks generated by rankers for a particular GERP feature structure. Each element corresponds to the rank from a ranker. 
   * @generated */
  public void setRanks(FSArray v) {
    if (GerpTop_Type.featOkTst && ((GerpTop_Type)jcasType).casFeat_ranks == null)
      jcasType.jcas.throwFeatMissing("ranks", "org.oaqa.model.gerp.GerpTop");
    jcasType.ll_cas.ll_setRefValue(addr, ((GerpTop_Type)jcasType).casFeatCode_ranks, jcasType.ll_cas.ll_getFSRef(v));}    
    
  /** indexed getter for ranks - gets an indexed value - An array of ranks generated by rankers for a particular GERP feature structure. Each element corresponds to the rank from a ranker.
   * @generated */
  public Rank getRanks(int i) {
    if (GerpTop_Type.featOkTst && ((GerpTop_Type)jcasType).casFeat_ranks == null)
      jcasType.jcas.throwFeatMissing("ranks", "org.oaqa.model.gerp.GerpTop");
    jcasType.jcas.checkArrayBounds(jcasType.ll_cas.ll_getRefValue(addr, ((GerpTop_Type)jcasType).casFeatCode_ranks), i);
    return (Rank)(jcasType.ll_cas.ll_getFSForRef(jcasType.ll_cas.ll_getRefArrayValue(jcasType.ll_cas.ll_getRefValue(addr, ((GerpTop_Type)jcasType).casFeatCode_ranks), i)));}

  /** indexed setter for ranks - sets an indexed value - An array of ranks generated by rankers for a particular GERP feature structure. Each element corresponds to the rank from a ranker.
   * @generated */
  public void setRanks(int i, Rank v) { 
    if (GerpTop_Type.featOkTst && ((GerpTop_Type)jcasType).casFeat_ranks == null)
      jcasType.jcas.throwFeatMissing("ranks", "org.oaqa.model.gerp.GerpTop");
    jcasType.jcas.checkArrayBounds(jcasType.ll_cas.ll_getRefValue(addr, ((GerpTop_Type)jcasType).casFeatCode_ranks), i);
    jcasType.ll_cas.ll_setRefArrayValue(jcasType.ll_cas.ll_getRefValue(addr, ((GerpTop_Type)jcasType).casFeatCode_ranks), i, jcasType.ll_cas.ll_getFSRef(v));}
   
    
  //*--------------*
  //* Feature: pruningDecisions

  /** getter for pruningDecisions - gets An array of purning decisions generated by pruners for a particular GERP feature structure. Each element corresponds to the pruning decision from a pruner. The final decision will be made by a multiplexer (or phrase driver).
   * @generated */
  public FSArray getPruningDecisions() {
    if (GerpTop_Type.featOkTst && ((GerpTop_Type)jcasType).casFeat_pruningDecisions == null)
      jcasType.jcas.throwFeatMissing("pruningDecisions", "org.oaqa.model.gerp.GerpTop");
    return (FSArray)(jcasType.ll_cas.ll_getFSForRef(jcasType.ll_cas.ll_getRefValue(addr, ((GerpTop_Type)jcasType).casFeatCode_pruningDecisions)));}
    
  /** setter for pruningDecisions - sets An array of purning decisions generated by pruners for a particular GERP feature structure. Each element corresponds to the pruning decision from a pruner. The final decision will be made by a multiplexer (or phrase driver). 
   * @generated */
  public void setPruningDecisions(FSArray v) {
    if (GerpTop_Type.featOkTst && ((GerpTop_Type)jcasType).casFeat_pruningDecisions == null)
      jcasType.jcas.throwFeatMissing("pruningDecisions", "org.oaqa.model.gerp.GerpTop");
    jcasType.ll_cas.ll_setRefValue(addr, ((GerpTop_Type)jcasType).casFeatCode_pruningDecisions, jcasType.ll_cas.ll_getFSRef(v));}    
    
  /** indexed getter for pruningDecisions - gets an indexed value - An array of purning decisions generated by pruners for a particular GERP feature structure. Each element corresponds to the pruning decision from a pruner. The final decision will be made by a multiplexer (or phrase driver).
   * @generated */
  public PruningDecision getPruningDecisions(int i) {
    if (GerpTop_Type.featOkTst && ((GerpTop_Type)jcasType).casFeat_pruningDecisions == null)
      jcasType.jcas.throwFeatMissing("pruningDecisions", "org.oaqa.model.gerp.GerpTop");
    jcasType.jcas.checkArrayBounds(jcasType.ll_cas.ll_getRefValue(addr, ((GerpTop_Type)jcasType).casFeatCode_pruningDecisions), i);
    return (PruningDecision)(jcasType.ll_cas.ll_getFSForRef(jcasType.ll_cas.ll_getRefArrayValue(jcasType.ll_cas.ll_getRefValue(addr, ((GerpTop_Type)jcasType).casFeatCode_pruningDecisions), i)));}

  /** indexed setter for pruningDecisions - sets an indexed value - An array of purning decisions generated by pruners for a particular GERP feature structure. Each element corresponds to the pruning decision from a pruner. The final decision will be made by a multiplexer (or phrase driver).
   * @generated */
  public void setPruningDecisions(int i, PruningDecision v) { 
    if (GerpTop_Type.featOkTst && ((GerpTop_Type)jcasType).casFeat_pruningDecisions == null)
      jcasType.jcas.throwFeatMissing("pruningDecisions", "org.oaqa.model.gerp.GerpTop");
    jcasType.jcas.checkArrayBounds(jcasType.ll_cas.ll_getRefValue(addr, ((GerpTop_Type)jcasType).casFeatCode_pruningDecisions), i);
    jcasType.ll_cas.ll_setRefArrayValue(jcasType.ll_cas.ll_getRefValue(addr, ((GerpTop_Type)jcasType).casFeatCode_pruningDecisions), i, jcasType.ll_cas.ll_getFSRef(v));}
  }

    